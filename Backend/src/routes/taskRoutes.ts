import { Router, Request, Response } from "express";
import { AppDataSource } from "../data-source";
import { Tasks } from "../entities/Task";
import { Users } from "../entities/User";
import { tokencheck } from "../utiles/tokenUtils";
import { v4 as uuidv4 } from "uuid";
import cors from "cors";

const router = Router();


// √öj feladat l√©trehoz√°sa (Token ellen≈ërz√©ssel)
router.post("/", tokencheck, async (req: any, res: any) => {
    try {
        const { title, description, priority, dueDate } = req.body;

        if (!title || !priority || !dueDate) {
            return res.status(400).json({ message: "Hi√°nyz√≥ adatok!" });
        }

        const task = new Tasks();
        task.id = uuidv4();
        task.title = title;
        task.description = description || null;
        task.priority = priority;
        task.dueDate = new Date(dueDate);
        task.createdAt = new Date();
        task.userId = req.user.id; // üîπ Be√°ll√≠tjuk a felhaszn√°l√≥ ID-j√°t

        await AppDataSource.getRepository(Tasks).save(task);

        return res.status(201).json({ message: "Feladat l√©trehozva!", task });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt:", error);
        return res.status(500).json({ message: "Szerverhiba." });
    }
});

router.get("/", async (req: any, res: any) => {
    try {
        const tasks = await AppDataSource.getRepository(Tasks).find();

        if (!tasks.length) {
            return res.status(200).json({ message: "Nincsenek feladatok az adatb√°zisban!", tasks: [] }); // üîπ √úzenet + √ºres lista
        }

        return res.status(200).json({ tasks });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt a feladatok lek√©rdez√©sekor:", error);
        return res.status(500).json({ message: "Szerverhiba t√∂rt√©nt." });
    }
});

// Task friss√≠t√©s√©hez sz√ºks√©ges k√©r√©s t√≠pus√°nak meghat√°roz√°sa  


router.put("/:id", async (req: any, res: any) => {
    try {
        const { id } = req.params;
        const { title, description, dueDate , status} = req.body;


        const taskRepository = AppDataSource.getRepository(Tasks);
        let task = await taskRepository.findOneBy({ id });

        if (!task) {
            return res.status(404).json({ message: "Feladat nem tal√°lhat√≥!" });
        }

        // Csak a megengedett mez≈ëk friss√≠t√©se
        task.title = title;
        task.description = description;
        task.dueDate = dueDate;
        task.status = status;

        await taskRepository.save(task);

        return res.status(200).json({ message: "Feladat friss√≠tve!", task });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt a feladat friss√≠t√©sekor:", error);
        return res.status(500).json({ message: "Szerverhiba t√∂rt√©nt." });
    }
});


// Task t√∂rl√©s√©hez sz√ºks√©ges v√©gpont
router.delete("/:id", async (req: any, res: any) => {
    try {
        const { id } = req.params;
        
        // Ellen≈ërizz√ºk, hogy l√©tezik-e a feladat az adatb√°zisban
        const taskRepository = AppDataSource.getRepository(Tasks);
        const task = await taskRepository.findOneBy({ id });

        if (!task) {
            return res.status(404).json({ message: "Feladat nem tal√°lhat√≥!" });
        }

        // Feladat t√∂rl√©se az adatb√°zisb√≥l
        await taskRepository.remove(task);

        return res.status(200).json({ message: "Feladat sikeresen t√∂r√∂lve!" });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt a feladat t√∂rl√©s√©n√©l:", error);
        return res.status(500).json({ message: "Szerverhiba t√∂rt√©nt." });
    }
});

// St√°tusz friss√≠t√©se PATCH k√©r√©ssel
router.patch("/:id/status", async (req: any, res: any) => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        if (!status) {
            return res.status(400).json({ message: "A st√°tusz nem lehet √ºres!" });
        }

        const taskRepository = AppDataSource.getRepository(Tasks);
        let task = await taskRepository.findOneBy({ id });

        if (!task) {
            return res.status(404).json({ message: "Feladat nem tal√°lhat√≥!" });
        }

        // Csak a st√°tusz friss√≠t√©se
        task.status = status;

        await taskRepository.save(task);

        return res.status(200).json({ message: "Feladat st√°tusza friss√≠tve!", task });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt a feladat st√°tusz√°nak friss√≠t√©sekor:", error);
        return res.status(500).json({ message: "Szerverhiba t√∂rt√©nt." });
    }
});



export default router;