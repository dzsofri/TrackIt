import { Router, Request, Response } from "express";
import { AppDataSource } from "../data-source";
import { Tasks } from "../entities/Task";
import { Users } from "../entities/User";
import { tokencheck } from "../utiles/tokenUtils";
import { v4 as uuidv4 } from "uuid";
import cors from "cors";


const router = Router();




// √öj feladat l√©trehoz√°sa (Token ellen≈ërz√©ssel)
router.post("/", tokencheck, async (req: any, res: any) => {
    try {
        const { title, description, priority, dueDate } = req.body;

        if (!title || !priority || !dueDate) {
            return res.status(400).json({ message: "Hi√°nyz√≥ adatok!" });
        }

        if (!req.user || !req.user.id) {
            return res.status(401).json({ message: "Felhaszn√°l√≥i azonos√≠t√°s sz√ºks√©ges!" });
        }

        const task = new Tasks();
        task.id = uuidv4();
        task.title = title;
        task.description = description || null;
        task.priority = priority;
        task.dueDate = new Date(dueDate);
        task.createdAt = new Date();
        task.userId = req.user.id; // üîπ Be√°ll√≠tjuk a felhaszn√°l√≥ ID-j√°t

        await AppDataSource.getRepository(Tasks).save(task);

        return res.status(201).json({ message: "Feladat l√©trehozva!", task });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt:", error);
        return res.status(500).json({ message: "Szerverhiba." });
    }
});



router.get("/", async (req: any, res: any) => {
    try {
        const tasks = await AppDataSource.getRepository(Tasks).find();

        if (!tasks.length) {
            return res.status(200).json({ message: "Nincsenek feladatok az adatb√°zisban!", tasks: [] }); // üîπ √úzenet + √ºres lista
        }

        return res.status(200).json({ tasks });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt a feladatok lek√©rdez√©sekor:", error);
        return res.status(500).json({ message: "Szerverhiba t√∂rt√©nt." });
    }
});

// Task friss√≠t√©s√©hez sz√ºks√©ges k√©r√©s t√≠pus√°nak meghat√°roz√°sa
interface UpdateTaskRequest {
    status: 'todo' | 'in-progress' | 'done'; // Az elfogadott st√°tuszok
}

router.put("/tasks/:id", async (req: any, res: any) => {
    try {
        const { id } = req.params;
        const { status }: UpdateTaskRequest = req.body; // Kinyerj√ºk a status-t az req.body-b√≥l

        // Ellen≈ërizz√ºk, hogy √©rv√©nyes st√°tusz lett-e megadva
        const validStatuses = ["todo", "in-progress", "done"];
        if (!validStatuses.includes(status)) {
            return res.status(400).json({ message: "√ârv√©nytelen st√°tusz!" });
        }

        const taskRepository = AppDataSource.getRepository(Tasks);
        let task = await taskRepository.findOneBy({ id });

        if (!task) {
            return res.status(404).json({ message: "Feladat nem tal√°lhat√≥!" });
        }

        // St√°tusz friss√≠t√©se
        task.status = status;
        await taskRepository.save(task);

        return res.status(200).json({ message: "Feladat friss√≠tve!", task });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt a feladat friss√≠t√©sekor:", error);
        return res.status(500).json({ message: "Szerverhiba t√∂rt√©nt." });
    }
});

// Task t√∂rl√©s√©hez sz√ºks√©ges v√©gpont
router.delete("/:id", async (req: any, res: any) => {
    try {
        const { id } = req.params;
        
        // Ellen≈ërizz√ºk, hogy l√©tezik-e a feladat az adatb√°zisban
        const taskRepository = AppDataSource.getRepository(Tasks);
        const task = await taskRepository.findOneBy({ id });

        if (!task) {
            return res.status(404).json({ message: "Feladat nem tal√°lhat√≥!" });
        }

        // Feladat t√∂rl√©se az adatb√°zisb√≥l
        await taskRepository.remove(task);

        return res.status(200).json({ message: "Feladat sikeresen t√∂r√∂lve!" });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt a feladat t√∂rl√©s√©n√©l:", error);
        return res.status(500).json({ message: "Szerverhiba t√∂rt√©nt." });
    }
});




export default router;